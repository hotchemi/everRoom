package jobs;import models.Member;import org.apache.commons.mail.EmailException;import org.apache.commons.mail.HtmlEmail;import play.Logger;import play.Play;import play.jobs.Job;import play.jobs.On;import play.libs.Mail;import youroom4j.YouRoom;import youroom4j.impl.YouRoomFactory;import youroom4j.model.Entry;import youroom4j.model.Group;import youroom4j.model.Paging;import youroom4j.model.Participation;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;/** * Evernoteにメールを送信する｡ */@On("${job.every}")public class SendMail extends Job {  @Override  public void doJob() {    List<Member> members = Member.findAll();    for(Member member:members) {      Logger.info(member.toString() + "'s job start…");      try {        mailToEvernote(member);      } catch (EmailException e) {        Logger.info("Job failed…");      }    }  }  /**   * Evernoteにメールを送信する｡   *   * @param member   * @throws EmailException   */  private void mailToEvernote(Member member) throws EmailException {    if(member.everMail == null || member.title == null) {      Logger.info("Job can't start because invalid config.");      return;    }    HtmlEmail email = new HtmlEmail();    email.addTo(member.everMail + "@m.evernote.com");    email.setFrom(Play.configuration.getProperty("everRoom.email"));    email.setSubject(replaceDate(member.title) + " @" + member.note + " #" + member.tag);    email.setCharset("UTF-8");    List<Entry> topics = getYouRoom(member.token, member.tokenSecret);    email.setHtmlMsg(createHtmlMsg(topics));    Mail.send(email);    Logger.info("Job success!!!");  }  /**   * 昨日のyouRoomのトピックを取得｡   *   * @param token   * @param secret   */  private List<Entry> getYouRoom(String token, String secret) {    YouRoom youRoom = YouRoomFactory.getInstance();    youRoom.setOAuthConsumer(        Play.configuration.getProperty("youroom.consumerKey"),        Play.configuration.getProperty("youroom.consumerSecret")    );    youRoom.setOAuthAccessToken(token, secret);    List<Entry> result = new ArrayList<Entry>();    int pageNumber = 1;    while (pageNumber < 10) {      List<Entry> tmp = youRoom.getHomeTimeline(new Paging(true, pageNumber, ""));      if(tmp.size() == 0) {        break;      } else if(checkDate(tmp)) {        result.addAll(extractTopics(tmp));      } else {        result.addAll(tmp);      }      pageNumber++;    }    return result;  }  /**   * youRoom#getHomeTimelineで取得した値の更新日付が昨日か判定｡   *   * @param list   * @return 取得したトピックを更新日付が昨日でなければtrue   */  private boolean checkDate(List<Entry> list) {    Calendar c = Calendar.getInstance();    SimpleDateFormat sfd = new SimpleDateFormat("yyyy-MM-dd");    String today = sfd.format(c.getTime());    c.add(Calendar.DATE, -1);    String yesterDay = sfd.format(c.getTime());    for (Entry entry : list) {      String updatedAt = entry.getUpdatedAt();      if (!updatedAt.startsWith(today) || !updatedAt.startsWith(yesterDay)) {        return true;      }    }    return false;  }  /**   * getHomeTimeline内で更新日付が昨日の所までを切り出して返却する｡   *   * @param list   */  private List<Entry> extractTopics(List<Entry> list){    Calendar c = Calendar.getInstance();    SimpleDateFormat sfd = new SimpleDateFormat("yyyy-MM-dd");    c.add(Calendar.DATE, -1);    String yesterDay = sfd.format(c.getTime());    List<Entry> result = new ArrayList<Entry>();    for (Entry aList : list) {      String updatedAt = aList.getUpdatedAt();      if (updatedAt.startsWith(yesterDay))        result.add(aList);    }    return result;  }  /**   * youRoomのトピックをhtmlに変換して返却する｡   * @param topics   * @return html   */  private String createHtmlMsg(List<Entry> topics){    StringBuilder result = new StringBuilder("<html><h2 style='font-size:14px;margin:0px;border-left:5px solid #ff1493; padding-left:3px; margin:0 0 2px 3px'>Topics</h2>");    for(Entry entry : topics) {      Participation participation = entry.getParticipation();      Group group = (Group) participation.getGroup();      result.append("<div style='border-bottom:1px solid #ccc; margin-bottom:4px'><table style='width:98%;font-size:12px;' <tr><td valign='top' style='width:50px'>");      result.append("<img src='https://www.youroom.in/r/").append(group.getToParam()).append("/participations/").append(participation.getId()).append("/picture'></td>");      result.append("<td valign='top'>").append(entry.getContent()).append("<br/>");      result.append("<span style='color:#999'><a target='blank' href='https://www.youroom.in/r/").append(group.getToParam()).append("/entries/").append(entry.getId()).append("'>").append(entry.getUpdatedAt()).append("</a></span><br/></td>");      result.append("</tr></table></div>");    }    result.append("<div align=\"center\"><font style=\"font-size:12px\">delivered by <a target='blank' href='http://everoom.herokuapp.com'>everRoom</a></font></div></html>");    return result.toString();  }  private String replaceDate(String argument) {    if(argument.contains("[Date]")) {      Calendar c = Calendar.getInstance();      c.add(Calendar.DATE, -1);      String[] week = {"日", "月", "火", "水", "木", "金", "土"};      int week_int = c.get(Calendar.DAY_OF_WEEK);      String yesterDay = new SimpleDateFormat("yyyy/MM/dd").format(c.getTime());      return argument.replace("[Date]", yesterDay + "(" + week[week_int - 1] + ")");    }    return argument;  }}